{
  "permissions": {
    "allow": [
      "Bash(ENABLE_MONITORING=false APPROVAL_MODE=yolo npx tsx src/cli.tsx --prompt \"lets design and then build react application that will manage watering schedules of plants. lets start with planning, in the end I want to have MD file with all design and architectyre including Mermain chart. After review, we will maybe adjust and then coding. Use WATERING_TEST folder for all files/code you build for this tasks\" --non-interactive)",
      "Bash(ENABLE_MONITORING=false APPROVAL_MODE=yolo npx tsx /Users/mike.admon/UNIPATH_PROJECT/gemini-cli/src/cli.tsx --prompt \"Create a simple test file called autonomous-test.txt with content ''FlexiCLI autonomous operation working perfectly without monitoring interference!''\" --non-interactive)",
      "Bash(mkdir:*)",
      "Bash(DEBUG=false ENABLE_MONITORING=false npx tsx src/cli.tsx --prompt \"Design and build a React plant watering scheduler app. Create complete architecture in WATERING_TEST folder with React frontend, Node.js backend, and comprehensive design documentation with Mermaid diagrams.\" --non-interactive)",
      "Bash(npm run build:*)",
      "Bash(DEBUG=false ENABLE_MONITORING=false npx tsx src/cli.tsx --prompt \"Create a simple test file called test-output.txt with content ''FlexiCLI is now working properly!''\" --non-interactive)",
      "Bash(DEBUG=false ENABLE_MONITORING=false npx tsx src/cli.tsx --prompt \"Design and build a React plant watering scheduler app. Create complete architecture in WATERING_TEST folder with React frontend using TypeScript and Material-UI, Node.js backend with SQLite, and comprehensive design documentation with Mermaid diagrams. Include plant CRUD operations, watering schedule tracking, calendar view, and reminder system.\" --non-interactive)",
      "Bash(DEBUG=true ENABLE_MONITORING=false npx tsx src/cli.tsx --prompt \"Debug: Show me the detailed plan for building the React plant watering app. List all planned tasks step by step.\" --non-interactive)",
      "Bash(sqlite3:*)",
      "Bash(DEBUG=false ENABLE_MONITORING=false npx tsx src/cli.tsx --prompt \"Build complete React plant watering app in WATERING_TEST folder. Skip research. Create: server/package.json, server/index.js with SQLite API, client/src/App.tsx, client/src/components/PlantCard.tsx, client/public/index.html, client/tsconfig.json. Make it fully functional.\" --non-interactive)",
      "Bash(DEBUG=true npx tsx src/cli.tsx --prompt \"Create simple test file WATERING_TEST/test.js with content ''console.log(\"\"hello\"\");''\" --non-interactive)",
      "Bash(DEBUG=false npx tsx src/cli.tsx --prompt \"Create file WATERING_TEST/test.js containing exactly: console.log(''FlexiCLI works!'');\" --non-interactive)",
      "Bash(cat:*)",
      "Bash(DEBUG=true npx tsx src/cli.tsx --prompt \"Write exactly this to file WATERING_TEST/simple-test.js: console.log(''success'');\" --non-interactive)",
      "Bash(find:*)",
      "Bash(grep:*)",
      "Bash(DEBUG=false npx tsx src/cli.tsx --prompt \"List all available tools\" --non-interactive)",
      "Bash(DEBUG=false ENABLE_MONITORING=false npx tsx src/cli.tsx --prompt \"Build React plant watering app in WATERING_TEST. Create: server/package.json with express+sqlite, server/index.js with REST API, client/package.json with react+mui, client/src/App.tsx with plant management, client/public/index.html. Use exact file paths and complete functional code.\" --non-interactive)",
      "Bash(DEBUG=true npx tsx src/cli.tsx --prompt \"Create file WATERING_TEST/test-fixed.js with exact content: console.log(''FlexiCLI trio communication WORKS!'');\" --non-interactive)",
      "Bash(DEBUG=false npx tsx src/cli.tsx --prompt \"Build complete React plant watering app in WATERING_TEST folder. Create server/package.json with express+sqlite3, server/index.js with REST API, client/package.json with react+mui, client/src/App.tsx with plant management UI, client/public/index.html. Make each file functional and complete.\" --non-interactive)",
      "Bash(DEBUG=true ENABLE_MONITORING=false npx tsx src/cli.tsx --prompt \"Create comprehensive design documentation for the React plant watering scheduler app. Include architecture overview with Mermaid diagrams, API specification, and component structure. Put all design docs in WATERING_TEST/design_docs folder. Do NOT implement code or install packages.\" --non-interactive)",
      "Bash(DEBUG=true ENABLE_MONITORING=false npx tsx src/cli.tsx --prompt \"Create design documentation for plant watering app with Mermaid diagram\" --non-interactive)",
      "Bash(git checkout:*)",
      "Bash(node:*)",
      "Bash(npx tsx:*)",
      "Bash(DEBUG=false ENABLE_MONITORING=false npx tsx src/cli.tsx --prompt \"Create comprehensive design documentation for plant watering app with Mermaid diagrams\" --non-interactive)",
      "Bash(git restore:*)",
      "Bash(xargs ls:*)",
      "Bash(sort:*)",
      "Bash(DEBUG=false ENABLE_MONITORING=false npx tsx src/cli.tsx --prompt \"Create a simple test documentation file with project overview\" --non-interactive)",
      "Bash(git add:*)",
      "Bash(git push:*)",
      "Bash(tree:*)",
      "Bash(git commit:*)",
      "Bash(pstree:*)",
      "Bash(awk:*)",
      "Bash(pkill:*)",
      "Bash(xargs rm:*)",
      "Bash(DEBUG=true ENABLE_MONITORING=true npx tsx src/cli.tsx --prompt \"Design and build a React plant watering scheduler app. Create complete architecture in WATERING_TEST folder with React frontend using TypeScript and Material-UI, Node.js backend with SQLite, and comprehensive design documentation with Mermaid diagrams. Include plant CRUD operations, watering schedule tracking, calendar view, and reminder system.\" --non-interactive)",
      "Bash(npx prisma migrate:*)",
      "Bash(DEBUG=true ENABLE_MONITORING=false npx tsx src/cli.tsx --prompt \"Create a simple TypeScript file with a function that adds two numbers\" --non-interactive)",
      "Bash(DEBUG=true ENABLE_MONITORING=false npx tsx src/cli.tsx --prompt \"Create a simple directory called TEST_DIR and create a TypeScript file called TEST_DIR/math.ts with functions to add and multiply two numbers\" --non-interactive)",
      "Bash(DEBUG=true ENABLE_MONITORING=false npx tsx src/cli.tsx --prompt \"Create a directory called TEST_DIR and create a TypeScript file called TEST_DIR/math.ts with functions to add and multiply two numbers\" --non-interactive)",
      "Bash(git rm:*)",
      "Bash(DEBUG=false ENABLE_MONITORING=false APPROVAL_MODE=yolo npx tsx src/cli.tsx --prompt \"Build a complete animal feeding schedule app in ANIMAL_FEEDING_APP folder. Create React frontend with TypeScript and Material-UI for tracking pet feeding schedules, Node.js backend with SQLite database, and comprehensive documentation. Include CRUD operations for pets, feeding schedules, reminders, and a dashboard. Make it fully functional.\" --non-interactive)",
      "Bash(DEBUG=false ENABLE_MONITORING=false APPROVAL_MODE=yolo npx tsx src/cli.tsx --prompt \"Build a complete task management app in TASK_APP folder. Create React frontend with TypeScript, Node.js backend with Express and SQLite, and comprehensive documentation. Include task CRUD operations, priority levels, due dates, categories, and a responsive dashboard. Make it fully functional with proper error handling.\" --non-interactive)",
      "Bash(npm install)",
      "Bash(timeout:*)",
      "Bash(npx tsc:*)"
    ],
    "deny": [],
    "ask": []
  }
}