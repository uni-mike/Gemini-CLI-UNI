{
  "permissions": {
    "allow": [
      "Bash(DEBUG=true APPROVAL_MODE=yolo npx tsx src/cli.tsx --prompt \"Create a simple test file called mode-test.txt with content ''''Mode detection test''''\" --non-interactive)",
      "Bash(DEBUG=true APPROVAL_MODE=yolo npx tsx src/cli.tsx --prompt \"Create a simple test file called mode-test.txt with content ''Mode detection test''\" --non-interactive)",
      "Bash(npx prisma db pull:*)",
      "Bash(while read table)",
      "Bash(do echo \"=== $table ===\")",
      "Bash(done)",
      "Bash(DEBUG=true npx tsx src/cli.tsx --prompt \"create a file called execution-test.txt with content ''''testing execution logging''''\" --non-interactive)",
      "Bash(DEBUG=true npx tsx src/cli.tsx --prompt \"create a file called execution-test.txt with content ''testing execution logging''\" --non-interactive)",
      "Bash(npm install:*)",
      "Bash(DEBUG=true npx tsx src/cli.tsx --prompt \"echo hello\" --non-interactive)",
      "Bash(export DEBUG=true)",
      "Read(//Users/mike.admon/node_modules/**)",
      "Bash(DEBUG=true npx tsx src/cli.tsx --prompt \"create file test-execution.txt with content ''testing ExecutionLog''\" --non-interactive)",
      "Read(//Users/mike.admon/**)",
      "Bash(DEBUG=true npx tsx src/cli.tsx --prompt \"create file test-execution.txt with content ''''testing ExecutionLog''''\" --non-interactive)",
      "Bash(export NODE_OPTIONS=\"--experimental-loader tsx\")",
      "Bash(npm uninstall:*)",
      "Bash(DEBUG=true node_modules/.bin/tsx src/cli.tsx --prompt \"create file test-execution.txt with content ''testing ExecutionLog''\" --non-interactive)",
      "Bash(DEBUG=true node_modules/.bin/tsx src/cli.tsx --prompt \"create test-exec.txt with ''Testing ExecutionLog functionality''\" --non-interactive)",
      "Bash(npx prisma generate:*)",
      "Bash(DEBUG=true npx tsx test-token-tracking.ts)",
      "Bash(ENABLE_MONITORING=false DEBUG=true npx tsx test-token-tracking.ts)",
      "Bash(DEBUG=true ENABLE_MONITORING=false APPROVAL_MODE=yolo npx tsx src/cli.tsx --prompt \"create a simple test file called token-test.txt with content ''''Testing token tracking''''\" --non-interactive)",
      "Bash(tee:*)",
      "Bash(DEBUG=true ENABLE_MONITORING=false APPROVAL_MODE=yolo npx tsx src/cli.tsx --prompt \"echo hello world\" --non-interactive)",
      "Bash(DEBUG=true ENABLE_MONITORING=false APPROVAL_MODE=yolo npx tsx src/cli.tsx --prompt \"echo test\" --non-interactive)",
      "Bash(DEBUG=true ENABLE_MONITORING=false APPROVAL_MODE=yolo npx tsx src/cli.tsx --prompt \"create a test file test-token-tracking.txt with content ''''Testing tokens''''\" --non-interactive)",
      "Bash(bash:*)",
      "Bash(DEBUG=true ENABLE_MONITORING=false APPROVAL_MODE=yolo npx tsx src/cli.tsx --prompt \"create a test file called token-test.txt with content ''''Testing token tracking''''\" --non-interactive)",
      "Bash(env DEBUG=true ENABLE_MONITORING=false APPROVAL_MODE=yolo npx tsx:*)",
      "Bash(./test-token-db.sh:*)",
      "Bash(DEBUG=true APPROVAL_MODE=yolo npx tsx test-token-real-agent.ts)",
      "Bash(export DEBUG=true APPROVAL_MODE=yolo)",
      "Bash(DEBUG=true APPROVAL_MODE=yolo npx tsx src/cli.tsx --prompt \"create file yoga-test.txt with content ''''yoga fix test''''\" --non-interactive)",
      "Bash(env:*)",
      "WebSearch",
      "Bash(echo:*)"
    ],
    "deny": [],
    "ask": []
  }
}