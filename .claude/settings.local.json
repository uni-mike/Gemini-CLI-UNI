{
  "permissions": {
    "allow": [
      "Bash(npm install:*)",
      "Bash(npm run typecheck:*)",
      "Bash(node:*)",
      "Bash(npm run build:*)",
      "Bash(echo:*)",
      "Bash(export GEMINI_DEFAULT_AUTH_TYPE=azure-openai)",
      "Bash(npm run start:*)",
      "Bash(chmod:*)",
      "Bash(find:*)",
      "Bash(export AZURE_ENDPOINT_URL=https://mike-mazsz1c6-eastus2.openai.azure.com/)",
      "Bash(export AZURE_DEPLOYMENT=gpt-5)",
      "Bash(export AZURE_MODEL=gpt-5)",
      "Bash(export AZURE_OPENAI_API_VERSION=2024-12-01-preview)",
      "Read(//Users/mike.admon/**)",
      "Bash(grep:*)",
      "Bash(git checkout:*)",
      "Bash(./start-azure-gemini-cli.sh:*)",
      "Bash(export GEMINI_CLI_DISABLE_NEXT_SPEAKER_CHECK=true)",
      "Bash(./start-mini.sh:*)",
      "Bash(tree:*)",
      "Bash(cat:*)",
      "Bash(npm run lint:*)",
      "Bash(./start-deepseek.sh:*)",
      "Bash(gh repo create:*)",
      "Bash(git init:*)",
      "Bash(git branch:*)",
      "Bash(git remote add:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git push:*)",
      "Bash(gh repo view:*)",
      "Bash(npx tsc:*)",
      "Bash(pkill:*)",
      "Bash(./start-deepseek-fresh.sh:*)",
      "Bash(kill:*)",
      "Bash(curl:*)",
      "WebFetch(domain:ai.azure.com)",
      "WebSearch",
      "Bash(pip3 install:*)",
      "Bash(python3:*)",
      "Bash(npm run cli:*)",
      "Bash(npm run:*)",
      "Bash(timeout 2 npm run start)",
      "Bash(./test-all-tools.sh:*)",
      "Bash(npx tsx:*)",
      "Bash(./quick-tool-test.sh:*)",
      "Bash(./test-shell-tool.sh:*)",
      "Bash(./test-web-tools.sh:*)",
      "Bash(./test-all-unipath-tools.sh:*)",
      "Bash(./test-tools-manual.sh:*)",
      "Bash(./TEST_EVERY_TOOL.sh:*)",
      "Bash(./FAST_TEST_ALL.sh)",
      "Bash(./FINAL_TEST_SUITE.sh:*)",
      "Bash(npm test)",
      "Bash(./test-deepseek-complete.sh:*)",
      "Bash(./test-crypto-prices.sh:*)",
      "Bash(export)",
      "Bash(export PYCHARM_HOSTED=1)",
      "Bash(export JETBRAINS_IDE=1)",
      "Bash(export WEBSTORM_HOSTED=1)",
      "Bash(export IDEA_INITIAL_DIRECTORY=/tmp)",
      "Bash(env)",
      "WebFetch(domain:marketplace.visualstudio.com)",
      "Bash(git clone:*)",
      "Bash(./install-unipath-extensions.sh:*)",
      "Bash(tar:*)",
      "Bash(./gradlew:*)",
      "Bash(gradle:*)",
      "Bash(brew install:*)",
      "Bash(brew uninstall:*)",
      "Bash(export:*)",
      "Bash(lsof:*)",
      "Bash(cd:*)",
      "Bash(unzip:*)",
      "Bash(osascript:*)",
      "Bash(jar tf:*)",
      "Read(//private/tmp/**)",
      "mcp__ide__getDiagnostics",
      "WebFetch(domain:github.com)",
      "Read(//Applications/PyCharm CE.app/Contents/**)",
      "Bash(/Users/mike.admon/UNIPATH_PROJECT/gemini-cli/test-ide-connection.sh)",
      "Bash(./test-ide-connection.sh:*)",
      "Bash(jar xf:*)",
      "Read(//tmp/**)",
      "Bash(bash:*)",
      "Bash(./enable-pycharm-ide.sh:*)",
      "Bash(./fix-pycharm-ide-now.sh:*)",
      "Read(//private/var/folders/k2/w0bcbbmx61nblrl4vf2tzns00000gp/T/**)",
      "Read(//var/folders/k2/w0bcbbmx61nblrl4vf2tzns00000gp/T/**)",
      "Bash(./task-chunker.sh:*)",
      "Bash(./debug-stuck-deepseek.sh:*)",
      "Bash(screen:*)",
      "Bash(tmux ls:*)",
      "Bash(npx ts-node:*)",
      "Bash(gtimeout:*)",
      "Bash(APPROVAL_MODE=yolo ./start-deepseek.sh --prompt \"Create a simple test file called hello.txt with the content ''Hello from orchestration system!''\" --non-interactive)",
      "Bash(APPROVAL_MODE=default ./start-deepseek.sh --prompt \"Create a simple test file called hello.txt with the content ''Hello from orchestration system!''\" --non-interactive)",
      "Bash(APPROVAL_MODE=default ./start-deepseek.sh --prompt \"create 2 txt files\" --non-interactive)",
      "Bash(APPROVAL_MODE=default ./start-deepseek-fresh.sh --prompt \"create test-interactive.txt file\")",
      "Bash(timeout:*)",
      "Bash(APPROVAL_MODE=default ./start-deepseek.sh --prompt \"create test-approval.txt file with content ''Hello World''\" --non-interactive)",
      "Bash(git reset:*)",
      "Bash(git stash:*)",
      "Bash(APPROVAL_MODE=yolo ./start-deepseek.sh --prompt \"create test-refactored.txt with content ''Testing refactored DeepSeek integration successfully!''\" --non-interactive)",
      "Bash(DEBUG=true APPROVAL_MODE=yolo ./start-deepseek.sh --prompt \"what is 2 + 2?\" --non-interactive)",
      "Bash(APPROVAL_MODE=yolo ./start-deepseek.sh --prompt \"what is 2 + 2?\" --non-interactive)",
      "Bash(APPROVAL_MODE=yolo ./start-deepseek.sh --prompt \"create a file called test-orchestration.txt with content ''''Testing refactored DeepSeek integration successfully!''''\" --non-interactive)",
      "Bash(APPROVAL_MODE=yolo ./start-deepseek.sh --prompt \"search the web for current Bitcoin price\" --non-interactive)",
      "Bash(ls:*)",
      "Bash(APPROVAL_MODE=yolo ./start-deepseek.sh --prompt \"What is 3 + 3?\" --non-interactive)",
      "Bash(APPROVAL_MODE=yolo DEBUG=true ./start-deepseek.sh --prompt \"What is the current Bitcoin price?\" --non-interactive)",
      "Bash(APPROVAL_MODE=yolo timeout 30 ./start-deepseek.sh --prompt \"What is the current Bitcoin price?\" --non-interactive)",
      "Bash(APPROVAL_MODE=yolo gtimeout:*)",
      "Bash(APPROVAL_MODE=yolo ./start-deepseek.sh --prompt \"What is the current Bitcoin price?\" --non-interactive)",
      "Bash(APPROVAL_MODE=yolo ./start-deepseek.sh:*)",
      "Bash(./test-deepseek-comprehensive.sh:*)",
      "Bash(APPROVAL_MODE=yolo DEBUG=true ./start-deepseek.sh --prompt \"What is 2 + 2?\" --non-interactive)",
      "Bash(./test-final-comprehensive.sh:*)",
      "Bash(./comprehensive-test.sh)",
      "Bash(APPROVAL_MODE=yolo timeout 10 ./start-deepseek.sh --prompt \"What is 2 + 2?\" --non-interactive)",
      "Bash(./test-all-features.sh:*)",
      "Bash(APPROVAL_MODE=yolo timeout 30 ./start-deepseek.sh --prompt \"search Bitcoin price then create btc-report.txt\" --non-interactive)",
      "Bash(sed:*)",
      "Bash(git restore:*)",
      "Bash(npm start:*)",
      "Bash(APPROVAL_MODE=yolo ./start-deepseek-fresh.sh --prompt \"Search the web for ''TypeScript validation functions 2025'', then create utils/validator.ts with email validation function\" --non-interactive)",
      "Bash(APPROVAL_MODE=yolo ./start-deepseek-fresh.sh --prompt \"create a TypeScript validator function with email validation\" --non-interactive)",
      "Bash(/dev/null)",
      "Bash(APPROVAL_MODE=yolo ./start-deepseek-fresh.sh --prompt \"create hello-test.txt with content ''Hello World''\" --non-interactive)",
      "Bash(APPROVAL_MODE=yolo ./start-deepseek-fresh.sh --prompt \"search the web for ''TypeScript best practices 2025'' and create a summary file\" --non-interactive)",
      "Bash(APPROVAL_MODE=yolo ./start-deepseek-fresh.sh --prompt \"create test.txt file\" --non-interactive)",
      "Bash(APPROVAL_MODE=yolo ./start-deepseek-fresh.sh --prompt \"what is 2+2?\" --non-interactive)",
      "Bash(APPROVAL_MODE=yolo ./start-deepseek-fresh.sh --prompt \"what is 3+3?\")",
      "Bash(APPROVAL_MODE=yolo ./start-deepseek-fresh.sh --prompt \"create test-react-ink.txt with content ''Testing React Ink UI!''\")",
      "Bash(APPROVAL_MODE=yolo ./start-deepseek-fresh.sh --prompt \"what is 4+4?\")",
      "Bash(./fix-imports.sh)",
      "Bash(APPROVAL_MODE=yolo ./start-deepseek-fresh.sh --prompt \"create test-orchestration.txt with content ''Testing refactored DeepSeek integration successfully!''\")",
      "Bash(npx eslint:*)",
      "Bash(APPROVAL_MODE=yolo npm start)",
      "Bash(ln:*)",
      "Bash(npm i:*)",
      "Bash(./start-clean.sh:*)",
      "Bash(./start-unipath.sh:*)",
      "Bash(unipath-clean/start-clean.sh:*)",
      "Bash(DEBUG=true ./start-clean.sh --prompt \"What is 7+7?\" --non-interactive)",
      "Bash(./test-suite.sh:*)",
      "Bash(DEBUG=true timeout 10 ./start-clean.sh --prompt 'What is 5+5?' --non-interactive)",
      "Bash(DEBUG=true gtimeout 10 ./start-clean.sh --prompt 'What is 5+5?' --non-interactive)",
      "Bash(DEBUG=true ./start-clean.sh:*)",
      "Bash(./start-trio.sh:*)",
      "Bash(./test-trio-comprehensive.sh:*)",
      "Bash(DEBUG=true ./start-trio.sh --prompt \"What is 2+2?\" --non-interactive)",
      "Bash(DEBUG=true ./start-trio.sh --prompt \"create test-advanced-registry.txt with content ''Testing advanced tool registry integration successfully!''\" --non-interactive)",
      "Bash(DEBUG=true ./start-trio.sh --prompt \"create simple-test.txt with content ''Hello World''\" --non-interactive)",
      "Bash(DEBUG=true ./start-trio.sh --prompt \"create success-test.txt with content ''Advanced registry working!''\" --non-interactive)",
      "Bash(DEBUG=true ./start-trio.sh --prompt \"list all available tools\" --non-interactive)",
      "Bash(DEBUG=true ./start-trio.sh --prompt \"run echo ''''testing bash tool''''\" --non-interactive)",
      "Bash(DEBUG=true ./start-trio.sh --prompt \"read the file success-test.txt\" --non-interactive)",
      "Bash(DEBUG=true ./start-trio.sh --prompt \"use ls to list current directory\" --non-interactive)",
      "Bash(./validate-all-tools.sh)",
      "Bash(tsc)",
      "Bash(DEBUG=true timeout 10 ./start-trio.sh --prompt \"/help\" --non-interactive)",
      "Bash(DEBUG=true gtimeout 10 ./start-trio.sh --prompt \"/help\" --non-interactive)",
      "Bash(DEBUG=true ./start-trio.sh --prompt \"/help\" --non-interactive)",
      "Bash(./test-interactive.sh)",
      "Bash(./fix-imports-proper.sh)",
      "Bash(DEBUG=true timeout 2 ./start-clean.sh)",
      "Bash(DEBUG=true ./start-unipath.sh --prompt \"what is 2+2?\" --non-interactive)",
      "Bash(DEBUG=true timeout 10 ./start-clean.sh --prompt \"What is 5+5?\" --non-interactive)",
      "Bash(DEBUG=true gtimeout 10 ./start-clean.sh --prompt \"What is 5+5?\" --non-interactive)",
      "Bash(DEBUG=true timeout 10 ./start-clean.sh --prompt \"what is 2+2?\" --non-interactive)",
      "Bash(DEBUG=true gtimeout 10 ./start-clean.sh --prompt \"what is 2+2?\" --non-interactive)",
      "Bash(DEBUG=true timeout 5 ./start-clean.sh)",
      "Bash(DEBUG=true timeout 10 ./start-clean.sh)",
      "Bash(DEBUG=true gtimeout 15 ./start-clean.sh)",
      "Bash(DEBUG=true gtimeout 10 ./start-clean.sh --prompt \"list all available tools\" --non-interactive)",
      "Bash(DEBUG=true timeout 10 ./start-clean.sh --prompt \"list all available tools\" --non-interactive)",
      "WebFetch(domain:axllm.dev)",
      "WebFetch(domain:raw.githubusercontent.com)",
      "Bash(NODE_OPTIONS=\"--loader ts-node/esm\" node test.ts)",
      "Bash(npm tsc:*)",
      "Bash(./test-json-isolated.sh:*)",
      "Bash(./test-json-simple.sh:*)",
      "Bash(DEBUG=true timeout 30 ./start-clean.sh --prompt \"Create Express API\" --non-interactive)",
      "Bash(DEBUG=true gtimeout 30 ./start-clean.sh --prompt \"Create Express API\" --non-interactive)",
      "Bash(./test-comprehensive.sh:*)",
      "Bash(DEBUG=true timeout 30 ./start-clean.sh --prompt \"create package.json for a simple calculator\" --non-interactive)",
      "Bash(DEBUG=true gtimeout 30 ./start-clean.sh --prompt \"create package.json for a simple calculator\" --non-interactive)",
      "Bash(DEBUG=true timeout 30 ./start-clean.sh --prompt \"create Bitcoin price tracker dashboard with HTML and CSS\" --non-interactive)",
      "Bash(DEBUG=true gtimeout 30 ./start-clean.sh --prompt \"create Bitcoin price tracker dashboard with HTML and CSS\" --non-interactive)",
      "Bash(npx prisma generate:*)",
      "Bash(npx create-react-app:*)",
      "Bash(./test-monitoring-api.sh:*)",
      "Bash(npx prisma:*)",
      "Bash(./test-integration.sh:*)",
      "Bash(sqlite3:*)",
      "Bash(git rev-parse:*)",
      "Bash(open http://localhost:4000)",
      "Bash(DEBUG=true timeout 30 ./start-clean.sh --prompt \"What is 2+2? Also list the files in the current directory.\" --non-interactive)",
      "Bash(DEBUG=true gtimeout 30 ./start-clean.sh --prompt \"What is 2+2? Also create a simple test.txt file with ''Hello World'' content.\" --non-interactive)",
      "Bash(column:*)",
      "Bash(DEBUG=true timeout 30 ./start-clean.sh --prompt \"What is 3+3?\" --non-interactive)",
      "Bash(DEBUG=true gtimeout 30 ./start-clean.sh --prompt \"What is 3+3?\" --non-interactive)",
      "Bash(DEBUG=true gtimeout 30 ./start-clean.sh --prompt \"Search the web for ''TypeScript best practices 2025'', then create a file called best-practices.md with the top 5 practices, and calculate the sum of 42 + 58 + 100\" --non-interactive)",
      "Bash(DEBUG=true timeout 30 ./start-clean.sh --prompt \"Search the web for ''TypeScript best practices 2025'', then create a file called best-practices.md with the top 5 practices, and calculate the sum of 42 + 58 + 100\" --non-interactive)",
      "Bash(./fix-requires.sh)",
      "Bash(DEBUG=true timeout 30 ./start-clean.sh --prompt \"Create a file called agent-test-report.txt with content ''Agent Validation Report: PASSED'', then calculate 15 + 25, then list the files in the current directory\" --non-interactive)",
      "Bash(DEBUG=true gtimeout 30 ./start-clean.sh --prompt \"Create a file called agent-test-report.txt with content ''Agent Validation Report: PASSED'', then calculate 15 + 25, then list the files in the current directory\" --non-interactive)",
      "Bash(./start-monitoring-standalone.sh:*)",
      "Bash(open \"http://localhost:4000\")",
      "Bash(SKIP_PREFLIGHT_CHECK=true npm start)",
      "Bash(open \"http://localhost:3000\")",
      "Bash(DANGEROUSLY_DISABLE_HOST_CHECK=true npm start)",
      "Bash(xargs kill:*)",
      "Bash(npm uninstall:*)",
      "Bash(npx tailwindcss init:*)",
      "Bash(npx:*)",
      "WebFetch(domain:reactflow.dev)",
      "Bash(DEBUG=true timeout 30 ./start-clean.sh --prompt \"create test-monitoring-validation.txt with content ''FlexiCLI monitoring integration test successful!''\" --non-interactive)",
      "Bash(DEBUG=true gtimeout 30 ./start-clean.sh --prompt \"create test-monitoring-validation.txt with content ''FlexiCLI monitoring integration test successful!''\" --non-interactive)",
      "Bash(./dev-monitoring.sh:*)",
      "Bash(for endpoint in health overview memory tools metrics events agents projects sessions pipeline)",
      "Bash(mv:*)",
      "Bash(APPROVAL_MODE=yolo ./start-clean.sh --prompt \"Create a simple hello.txt file with content ''Hello from FlexiCLI''\" --non-interactive)",
      "Bash(APPROVAL_MODE=yolo timeout 30 ./start-clean.sh --prompt \"Create a simple hello.txt file with content ''Hello from FlexiCLI''\" --non-interactive)",
      "Bash(APPROVAL_MODE=yolo ./start-clean.sh --prompt \"Create a simple test.txt file with content ''Testing FlexiCLI monitoring''\" --non-interactive)",
      "Bash(xargs rm:*)",
      "Bash(APPROVAL_MODE=yolo npx tsx src/cli.tsx --prompt \"What is 2+2?\" --non-interactive)",
      "Bash(./start-monitoring.sh:*)",
      "Bash(./start-agent.sh:*)",
      "Bash(open http://localhost:3000)",
      "Bash(xargs:*)",
      "Bash(APPROVAL_MODE=yolo ./start-clean.sh --prompt \"List the files in the current directory\" --non-interactive)",
      "Bash(./monitoring.sh:*)",
      "Bash(APPROVAL_MODE=yolo ./agent.sh --prompt \"Create a function that calculates fibonacci numbers\" --non-interactive)",
      "Bash(APPROVAL_MODE=yolo ./agent.sh --prompt \"List all available tools and their categories\" --non-interactive)",
      "Bash(awk:*)",
      "Bash(ENABLE_MONITORING=true APPROVAL_MODE=yolo ./agent.sh --prompt \"Calculate 5 + 5\" --non-interactive)",
      "Bash(./monitoring-dev.sh:*)",
      "Bash(ENABLE_MONITORING=true APPROVAL_MODE=yolo ./agent.sh --prompt \"Create a file called test-monitoring.txt with content ''Testing FlexiCLI monitoring integration!''\" --non-interactive)",
      "Bash(ENABLE_MONITORING=true APPROVAL_MODE=yolo ./agent.sh --prompt \"Create test-monitoring.txt with ''''Monitoring works!''''\" --non-interactive)",
      "Bash(for endpoint in health overview tools pipeline memory metrics tokens sessions events agents projects)",
      "Bash(ENABLE_MONITORING=true APPROVAL_MODE=yolo ./agent.sh --prompt \"Create a file test.txt with ''Hello World''\" --non-interactive)",
      "Bash(ENABLE_MONITORING=true APPROVAL_MODE=yolo timeout 30 ./agent.sh --prompt \"Create a file called test-monitoring.txt with content ''Testing FlexiCLI monitoring system''\" --non-interactive)",
      "Bash(ENABLE_MONITORING=true APPROVAL_MODE=yolo gtimeout 30 ./agent.sh --prompt \"What is 2 + 2?\" --non-interactive)",
      "Bash(ENABLE_MONITORING=true APPROVAL_MODE=yolo ./agent.sh --prompt \"What is 2 + 2?\" --non-interactive)",
      "Bash(ENABLE_MONITORING=true APPROVAL_MODE=yolo npx tsx src/cli.tsx --prompt \"What is 2 + 2?\" --non-interactive)",
      "Bash(ENABLE_MONITORING=true APPROVAL_MODE=yolo npx tsx src/cli.tsx --prompt \"Create a file called monitoring-test.txt with the content ''Monitoring data flow test successful!''\" --non-interactive)",
      "Bash(ENABLE_MONITORING=true APPROVAL_MODE=yolo npx tsx src/cli.tsx --prompt \"Calculate 10 + 20 and tell me the result\" --non-interactive)",
      "Bash(ENABLE_MONITORING=true APPROVAL_MODE=yolo npx tsx src/cli.tsx --prompt \"Search for monitoring-related files in the codebase and create a summary file called monitoring-summary.txt\" --non-interactive)",
      "Bash(./test-monitoring-comprehensive.sh:*)",
      "Bash(ENABLE_MONITORING=true APPROVAL_MODE=yolo npx tsx src/cli.tsx --prompt \"Create a TypeScript function called fibonacci.ts that calculates the Nth fibonacci number using both recursive and iterative approaches. Include proper TypeScript types and test examples.\" --non-interactive)",
      "Bash(ENABLE_MONITORING=true APPROVAL_MODE=yolo npx tsx src/cli.tsx --prompt \"What is 5 + 5? Just give me the answer\" --non-interactive)",
      "Bash(SKIP_GIT_CONTEXT=true ENABLE_MONITORING=true APPROVAL_MODE=yolo npx tsx src/cli.tsx --prompt \"Create a file called test-monitoring-real.txt with content ''Real monitoring test successful!''\" --non-interactive)"
    ],
    "deny": [],
    "ask": []
  }
}