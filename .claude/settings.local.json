{
  "permissions": {
    "allow": [
      "Bash(DEBUG=true APPROVAL_MODE=yolo npx tsx src/cli.tsx --prompt \"Create a simple test file called mode-test.txt with content ''''Mode detection test''''\" --non-interactive)",
      "Bash(DEBUG=true APPROVAL_MODE=yolo npx tsx src/cli.tsx --prompt \"Create a simple test file called mode-test.txt with content ''Mode detection test''\" --non-interactive)",
      "Bash(npx prisma db pull:*)",
      "Bash(while read table)",
      "Bash(do echo \"=== $table ===\")",
      "Bash(done)",
      "Bash(DEBUG=true npx tsx src/cli.tsx --prompt \"create a file called execution-test.txt with content ''''testing execution logging''''\" --non-interactive)",
      "Bash(DEBUG=true npx tsx src/cli.tsx --prompt \"create a file called execution-test.txt with content ''testing execution logging''\" --non-interactive)",
      "Bash(npm install:*)",
      "Bash(DEBUG=true npx tsx src/cli.tsx --prompt \"echo hello\" --non-interactive)",
      "Bash(export DEBUG=true)",
      "Read(//Users/mike.admon/node_modules/**)",
      "Bash(DEBUG=true npx tsx src/cli.tsx --prompt \"create file test-execution.txt with content ''testing ExecutionLog''\" --non-interactive)",
      "Read(//Users/mike.admon/**)",
      "Bash(DEBUG=true npx tsx src/cli.tsx --prompt \"create file test-execution.txt with content ''''testing ExecutionLog''''\" --non-interactive)",
      "Bash(export NODE_OPTIONS=\"--experimental-loader tsx\")",
      "Bash(npm uninstall:*)",
      "Bash(DEBUG=true node_modules/.bin/tsx src/cli.tsx --prompt \"create file test-execution.txt with content ''testing ExecutionLog''\" --non-interactive)",
      "Bash(DEBUG=true node_modules/.bin/tsx src/cli.tsx --prompt \"create test-exec.txt with ''Testing ExecutionLog functionality''\" --non-interactive)",
      "Bash(npx prisma generate:*)",
      "Bash(DEBUG=true npx tsx test-token-tracking.ts)",
      "Bash(ENABLE_MONITORING=false DEBUG=true npx tsx test-token-tracking.ts)",
      "Bash(DEBUG=true ENABLE_MONITORING=false APPROVAL_MODE=yolo npx tsx src/cli.tsx --prompt \"create a simple test file called token-test.txt with content ''''Testing token tracking''''\" --non-interactive)",
      "Bash(tee:*)",
      "Bash(DEBUG=true ENABLE_MONITORING=false APPROVAL_MODE=yolo npx tsx src/cli.tsx --prompt \"echo hello world\" --non-interactive)",
      "Bash(DEBUG=true ENABLE_MONITORING=false APPROVAL_MODE=yolo npx tsx src/cli.tsx --prompt \"echo test\" --non-interactive)",
      "Bash(DEBUG=true ENABLE_MONITORING=false APPROVAL_MODE=yolo npx tsx src/cli.tsx --prompt \"create a test file test-token-tracking.txt with content ''''Testing tokens''''\" --non-interactive)",
      "Bash(bash:*)",
      "Bash(DEBUG=true ENABLE_MONITORING=false APPROVAL_MODE=yolo npx tsx src/cli.tsx --prompt \"create a test file called token-test.txt with content ''''Testing token tracking''''\" --non-interactive)",
      "Bash(env DEBUG=true ENABLE_MONITORING=false APPROVAL_MODE=yolo npx tsx:*)",
      "Bash(./test-token-db.sh:*)",
      "Bash(DEBUG=true APPROVAL_MODE=yolo npx tsx test-token-real-agent.ts)",
      "Bash(export DEBUG=true APPROVAL_MODE=yolo)",
      "Bash(DEBUG=true APPROVAL_MODE=yolo npx tsx src/cli.tsx --prompt \"create file yoga-test.txt with content ''''yoga fix test''''\" --non-interactive)",
      "Bash(env:*)",
      "WebSearch",
      "Bash(echo:*)",
      "Bash(DEBUG=true APPROVAL_MODE=yolo npx tsx src/cli.tsx --prompt \"Create a simple math utility file with add and multiply functions\" --non-interactive)",
      "Bash(DEBUG=true ENABLE_MONITORING=false APPROVAL_MODE=yolo npx tsx test-token-real-agent.ts)",
      "Bash(DEBUG=true APPROVAL_MODE=yolo npx tsx src/cli.tsx --prompt \"create a test file called yoga-fix-test.txt with content ''Yoga-layout bypass successful!''\" --non-interactive)",
      "Bash(DEBUG=true APPROVAL_MODE=yolo npx tsx src/cli.tsx --prompt \"create a test file called file-txt-fix-test.txt with content ''No more file.txt fallbacks!'' and then verify the file was created correctly\" --non-interactive)",
      "Bash(DEBUG=true APPROVAL_MODE=yolo npx tsx src/cli.tsx --prompt \"test memory retrieval and caching by storing a simple knowledge entry\" --non-interactive)",
      "Bash(DEBUG=true APPROVAL_MODE=yolo npx tsx src/cli.tsx --prompt \"create a test file called cache-test.txt with content ''Testing cache persistence fix''\" --non-interactive)",
      "Bash(DEBUG=true APPROVAL_MODE=yolo npx tsx src/cli.tsx --prompt \"search my previous project history to find any React plant watering applications I may have built before\" --non-interactive)",
      "Bash(DEBUG=true APPROVAL_MODE=yolo npx tsx src/cli.tsx --prompt \"test memory retrieval by accessing existing knowledge base about the gemini-cli project architecture\" --non-interactive)",
      "Bash(DEBUG=true APPROVAL_MODE=yolo npx tsx src/cli.tsx --prompt \"analyze the existing codebase and create a comprehensive summary of the FlexiCLI architecture focusing on memory management patterns\" --non-interactive)",
      "Bash(DEBUG=true APPROVAL_MODE=yolo npx tsx src/cli.tsx --prompt \"Create a comprehensive summary of all React TypeScript patterns in the WATERING_TEST folder and compare them with modern best practices\" --non-interactive)",
      "Bash(DEBUG=true ENABLE_MONITORING=false npx tsx test-cache-embedding-integration.ts)",
      "Bash(DEBUG=true APPROVAL_MODE=yolo npx tsx src/cli.tsx --prompt \"Analyze and summarize the FlexiCLI memory architecture patterns by searching through existing code chunks and providing semantic insights on memory layer integration\" --non-interactive)",
      "Bash(time tree:*)",
      "Bash(DEBUG=true APPROVAL_MODE=yolo npx tsx src/cli.tsx --prompt \"Test the optimized tree tool by showing project structure\" --non-interactive)",
      "Bash(DEBUG=true APPROVAL_MODE=yolo npx tsx src/cli.tsx --prompt \"test embedding generation by storing some knowledge about the FlexiCLI project architecture\" --non-interactive)",
      "Bash(lsof:*)",
      "Bash(DEBUG=true APPROVAL_MODE=yolo npx tsx test-agent-singleness.ts)",
      "Bash(DEBUG=true APPROVAL_MODE=yolo npx tsx src/cli.tsx --prompt \"create a test file called agent-lock-test1.txt with content ''First agent running''\" --non-interactive)",
      "Bash(DEBUG=true APPROVAL_MODE=yolo npx tsx src/cli.tsx --prompt \"analyze the current project structure using tree command and create a comprehensive project summary file\" --non-interactive)",
      "Bash(DEBUG=true APPROVAL_MODE=yolo npx tsx src/cli.tsx --prompt \"create a test file called should-be-denied.txt with content ''This agent should be denied''\" --non-interactive)",
      "Bash(DEBUG=true APPROVAL_MODE=yolo npx tsx test-cache-debug.ts)",
      "Bash(DEBUG=true APPROVAL_MODE=yolo npx tsx src/cli.tsx --prompt \"create test file agent-lock-fixed.txt with content ''Agent lock integration working''\" --non-interactive)",
      "Bash(DEBUG=true APPROVAL_MODE=yolo npx tsx src/cli.tsx --prompt \"create test file should-be-denied-now.txt with content ''This should be denied by lock''\" --non-interactive)",
      "Bash(DEBUG=true APPROVAL_MODE=yolo npx tsx src/cli.tsx --prompt \"create a test file called obsolete-fix-test.txt with content ''Fixed obsolete directory references''\" --non-interactive)",
      "Bash(DEBUG=true APPROVAL_MODE=yolo npx tsx src/cli.tsx --prompt \"create a test file called cache-integration-test.txt with content ''Testing cache-database integration''\" --non-interactive)",
      "Bash(DEBUG=true APPROVAL_MODE=yolo npx tsx src/cli.tsx --prompt \"Analyze this complex codebase structure and create a comprehensive summary with architectural insights. Focus on the memory pipeline, agent coordination, and database design patterns. This is a complex task requiring deep analysis and semantic understanding.\" --non-interactive)",
      "Bash(DEBUG=true APPROVAL_MODE=yolo npx tsx src/cli.tsx --prompt \"create file env-test-output.txt and write all EMBEDDING_API environment variables to it\" --non-interactive)",
      "Bash(DEBUG=true APPROVAL_MODE=yolo npx tsx src/cli.tsx --prompt \"analyze this codebase and create a summary of the FlexiCLI memory architecture. Store insights and retrieve any existing knowledge about the system design\" --non-interactive)",
      "Bash(DEBUG=true APPROVAL_MODE=yolo npx tsx src/cli.tsx --prompt \"search for files containing the word memory in this codebase and analyze them to understand the memory system design\" --non-interactive)",
      "Bash(DEBUG=true APPROVAL_MODE=yolo npx tsx src/cli.tsx --prompt \"create a file called cache-timing-test.txt with content ''Testing cache database timing fix''\" --non-interactive)",
      "Bash(DEBUG=true APPROVAL_MODE=yolo npx tsx src/cli.tsx --prompt \"analyze the existing code in this repository to understand the memory system architecture and explain how embeddings should work\" --non-interactive)",
      "Bash(for table in Session SessionSnapshot ExecutionLog Knowledge Cache Chunks GitCommit)",
      "Bash(npx prisma db push:*)",
      "Bash(npx markdownlint-cli:*)",
      "Bash(sed:*)",
      "Bash(npx:*)"
    ],
    "deny": [],
    "ask": []
  }
}