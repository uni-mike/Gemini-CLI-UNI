// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "filterJson"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Tenant settings
  currency      String   @default("USD")
  timezone      String   @default("UTC")
  locale        String   @default("en-US")
  isActive      Boolean  @default(true)
  
  // Relationships
  users      User[]
  products   Product[]
  categories Category[]
  orders     Order[]
  
  @@map("tenants")
}

model User {
  id           String   @id @default(cuid())
  tenantId     String
  email        String   @unique
  password     String?  // Hashed password
  firstName    String
  lastName     String
  avatar       String?
  phone        String?
  
  // Auth
  emailVerified Boolean  @default(false)
  verificationToken String?
  resetToken       String?
  resetTokenExpiry DateTime?
  
  // Roles and permissions
  role        UserRole @default(CUSTOMER)
  permissions Json? // Custom permissions as JSON
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastLogin   DateTime?
  
  // Relationships
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  addresses   Address[]
  orders      Order[]
  reviews     Review[]
  cartItems   CartItem[]
  
  @@map("users")
  @@unique([tenantId, email])
}

model Address {
  id          String   @id @default(cuid())
  userId      String
  tenantId    String
  
  // Address details
  type        AddressType @default(SHIPPING)
  firstName   String
  lastName    String
  company     String?
  street1     String
  street2     String?
  city        String
  state       String
  postalCode  String
  country     String @default("US")
  phone       String?
  isDefault   Boolean @default(false)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  @@map("addresses")
}

model Category {
  id          String   @id @default(cuid())
  tenantId    String
  name        String
  slug        String
  description String?
  image       String?
  
  // Hierarchy
  parentId   String?
  parent     Category? @relation("CategoryToCategory", fields: [parentId], references: [id])
  children   Category[] @relation("CategoryToCategory")
  
  // Ordering
  position    Int      @default(0)
  
  // Status
  isActive    Boolean  @default(true)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  tenant   Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  products Product[]
  
  @@map("categories")
  @@unique([tenantId, slug])
}

model Product {
  id          String   @id @default(cuid())
  tenantId    String
  
  // Basic info
  name        String
  slug        String
  description String?
  
  // Media
  images      Json // Array of image URLs
  
  // Pricing
  price       Decimal
  comparePrice Decimal?
  costPrice   Decimal?
  
  // Inventory
  sku         String? @unique
  barcode     String?
  quantity    Int     @default(0)
  lowStockThreshold Int @default(5)
  allowOutOfStockPurchases Boolean @default(false)
  
  // Variants
  hasVariants Boolean @default(false)
  variants    Json?   // Variant definitions
  
  // Organization
  categoryId  String?
  
  // Metadata
  weight      Decimal? // in grams
  dimensions  Json?    // { length, width, height }
  
  // Status
  isActive    Boolean  @default(true)
  isFeatured  Boolean  @default(false)
  
  // SEO
  seoTitle       String?
  seoDescription String?
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  publishedAt DateTime?
  
  // Relationships
  tenant     Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  category   Category? @relation(fields: [categoryId], references: [id])
  reviews   Review[]
  orderItems OrderItem[]
  
  // Full-text search
  @@fulltext([name, description])
  @@map("products")
  @@unique([tenantId, slug])
}

model Review {
  id          String   @id @default(cuid())
  tenantId    String
  productId   String
  userId      String
  
  // Review content
  rating      Int      @db.SmallInt // 1-5
  title       String
  comment     String?
  
  // Status
  isApproved Boolean @default(false)
  isVerifiedPurchase Boolean @default(false)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  tenant  Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("reviews")
}

model CartItem {
  id          String   @id @default(cuid())
  tenantId    String
  userId      String
  productId   String
  
  // Item details
  quantity    Int      @default(1)
  variant     Json?    // Selected variant
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  tenant  Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@map("cart_items")
  @@unique([userId, productId, tenantId])
}

model Order {
  id          String   @id @default(cuid())
  tenantId    String
  userId      String
  
  // Order information
  orderNumber String   @unique
  status      OrderStatus @default(PENDING)
  
  // Pricing
  subtotal    Decimal
  taxAmount   Decimal
  shippingAmount Decimal
  discountAmount Decimal @default(0)
  total       Decimal
  currency    String   @default("USD")
  
  // Customer information
  customerEmail     String
  customerFirstName String
  customerLastName  String
  customerPhone     String?
  
  // Addresses
  shippingAddress Json
  billingAddress  Json
  
  // Payment
  paymentMethod    PaymentMethod
  paymentStatus    PaymentStatus @default(PENDING)
  paymentIntentId  String? // Stripe payment intent ID
  
  // Shipping
  shippingMethod   String?
  trackingNumber   String?
  
  // Metadata
  notes            String?
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  paidAt      DateTime?
  shippedAt   DateTime?
  deliveredAt DateTime?
  
  // Relationships
  tenant     Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
  
  @@map("orders")
}

model OrderItem {
  id          String   @id @default(cuid())
  tenantId    String
  orderId     String
  productId   String
  
  // Item details
  name        String
  price       Decimal
  quantity    Int
  variant     Json?    // Selected variant
  
  // Relationships
  tenant  Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])
  
  @@map("order_items")
}

// Enums
enum UserRole {
  SUPER_ADMIN
  ADMIN
  MANAGER
  CUSTOMER
}

enum AddressType {
  SHIPPING
  BILLING
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  PAYPAL
  STRIPE
  APPLE_PAY
  GOOGLE_PAY
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}