generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model SchemaVersion {
  id        Int      @id @default(autoincrement())
  version   Int      @unique
  appliedAt DateTime @default(now())
}

model Cache {
  id          String   @id @default(uuid())
  projectId   String
  cacheKey    String   @unique
  originalKey String
  value       String
  category    String   @default("general") // "embedding", "general", etc.
  size        Int
  accessCount Int      @default(0)
  lastAccess  DateTime @default(now())
  createdAt   DateTime @default(now())
  ttl         DateTime

  @@index([projectId, category])
  @@index([lastAccess])
  @@index([ttl])
  @@index([accessCount])
}

model Project {
  id        String         @id @default(uuid())
  rootPath  String         @unique
  name      String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  chunks    Chunk[]
  execLogs  ExecutionLog[]
  commits   GitCommit[]
  knowledge Knowledge[]
  sessions  Session[]
}

model Chunk {
  id         String   @id @default(uuid())
  projectId  String
  path       String
  content    String
  language   String?
  commitHash String?
  lineStart  Int?
  lineEnd    Int?
  tokenCount Int
  embedding  Bytes
  chunkType  String
  metadata   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  project    Project  @relation(fields: [projectId], references: [id])

  @@index([projectId, path])
  @@index([projectId, commitHash])
}

model GitCommit {
  id           String   @id @default(uuid())
  projectId    String
  hash         String
  author       String
  date         DateTime
  message      String
  filesChanged String
  diffChunks   String
  embedding    Bytes?
  createdAt    DateTime @default(now())
  project      Project  @relation(fields: [projectId], references: [id])

  @@unique([projectId, hash])
  @@index([projectId, date])
}

model Knowledge {
  id         String   @id @default(uuid())
  projectId  String
  key        String
  value      String
  category   String
  importance Int      @default(1)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  project    Project  @relation(fields: [projectId], references: [id])

  @@unique([projectId, key])
  @@index([projectId, category])
}

model ExecutionLog {
  id           String   @id @default(uuid())
  projectId    String
  sessionId    String?
  type         String   @default("TOOL_EXECUTION")
  tool         String
  input        String?
  output       String
  success      Boolean
  duration     Int      @default(0)
  errorMessage String?
  createdAt    DateTime @default(now())
  project      Project  @relation(fields: [projectId], references: [id])

  @@index([projectId, sessionId])
  @@index([projectId, createdAt])
}

model Session {
  id           String            @id @default(uuid())
  projectId    String
  mode         String
  startedAt    DateTime          @default(now())
  endedAt      DateTime?
  lastSnapshot String?
  turnCount    Int               @default(0)
  tokensUsed   Int               @default(0)
  status       String            @default("active")
  project      Project           @relation(fields: [projectId], references: [id])
  snapshots    SessionSnapshot[]

  @@index([projectId, startedAt])
  @@index([status])
}

model SessionSnapshot {
  id             String   @id @default(uuid())
  sessionId      String
  sequenceNumber Int
  ephemeralState String
  retrievalIds   String
  mode           String
  tokenBudget    String
  lastCommand    String?
  createdAt      DateTime @default(now())
  session        Session  @relation(fields: [sessionId], references: [id])

  @@unique([sessionId, sequenceNumber])
  @@index([sessionId, createdAt])
}
